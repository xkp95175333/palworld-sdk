#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_IngameMenu_Chest_LockNumInput

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_IngameMenu_Chest_LockNumInput.WBP_IngameMenu_Chest_LockNumInput_C.ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput
// 0x0020 (0x0020 - 0x0000)
struct WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsOn;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_PlayPass;                       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41AE[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default_1;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput) == 0x000008, "Wrong alignment on WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput");
static_assert(sizeof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput) == 0x000020, "Wrong size on WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput, EntryPoint) == 0x000000, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput, Temp_bool_Variable) == 0x000004, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput, Temp_byte_Variable) == 0x000005, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput, Temp_bool_Variable_1) == 0x000007, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput, K2Node_CustomEvent_IsOn) == 0x000008, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput::K2Node_CustomEvent_IsOn' has a wrong offset!");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput, K2Node_Select_Default) == 0x000009, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput, K2Node_CustomEvent_PlayPass) == 0x00000A, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput::K2Node_CustomEvent_PlayPass' has a wrong offset!");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput, K2Node_Select_Default_1) == 0x000010, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_ExecuteUbergraph_WBP_IngameMenu_Chest_LockNumInput::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_IngameMenu_Chest_LockNumInput.WBP_IngameMenu_Chest_LockNumInput_C.PlayAuthAnm
// 0x0001 (0x0001 - 0x0000)
struct WBP_IngameMenu_Chest_LockNumInput_C_PlayAuthAnm final
{
public:
	bool                                          PlayPass;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IngameMenu_Chest_LockNumInput_C_PlayAuthAnm) == 0x000001, "Wrong alignment on WBP_IngameMenu_Chest_LockNumInput_C_PlayAuthAnm");
static_assert(sizeof(WBP_IngameMenu_Chest_LockNumInput_C_PlayAuthAnm) == 0x000001, "Wrong size on WBP_IngameMenu_Chest_LockNumInput_C_PlayAuthAnm");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_PlayAuthAnm, PlayPass) == 0x000000, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_PlayAuthAnm::PlayPass' has a wrong offset!");

// Function WBP_IngameMenu_Chest_LockNumInput.WBP_IngameMenu_Chest_LockNumInput_C.SetOn
// 0x0001 (0x0001 - 0x0000)
struct WBP_IngameMenu_Chest_LockNumInput_C_SetOn final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_IngameMenu_Chest_LockNumInput_C_SetOn) == 0x000001, "Wrong alignment on WBP_IngameMenu_Chest_LockNumInput_C_SetOn");
static_assert(sizeof(WBP_IngameMenu_Chest_LockNumInput_C_SetOn) == 0x000001, "Wrong size on WBP_IngameMenu_Chest_LockNumInput_C_SetOn");
static_assert(offsetof(WBP_IngameMenu_Chest_LockNumInput_C_SetOn, IsOn) == 0x000000, "Member 'WBP_IngameMenu_Chest_LockNumInput_C_SetOn::IsOn' has a wrong offset!");

}

