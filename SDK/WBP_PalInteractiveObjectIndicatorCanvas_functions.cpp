#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PalInteractiveObjectIndicatorCanvas

#include "Basic.hpp"

#include "WBP_PalInteractiveObjectIndicatorCanvas_classes.hpp"
#include "WBP_PalInteractiveObjectIndicatorCanvas_parameters.hpp"


namespace SDK
{

// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.CanDisplayCoop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanDisplay                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::CanDisplayCoop(bool* CanDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "CanDisplayCoop");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_CanDisplayCoop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanDisplay != nullptr)
		*CanDisplay = Parms.CanDisplay;
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.CREATEDELEGATE_PROXYFUNCTION_0
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPalKeyConfigSettings            PrevSettings                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FPalKeyConfigSettings            NewSettings                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::CREATEDELEGATE_PROXYFUNCTION_0(const struct FPalKeyConfigSettings& PrevSettings, const struct FPalKeyConfigSettings& NewSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "CREATEDELEGATE_PROXYFUNCTION_0");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_CREATEDELEGATE_PROXYFUNCTION_0 Parms{};

	Parms.PrevSettings = std::move(PrevSettings);
	Parms.NewSettings = std::move(NewSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.CreateIndicatorUI
// (Private, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::CreateIndicatorUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "CreateIndicatorUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.ExecuteUbergraph_WBP_PalInteractiveObjectIndicatorCanvas
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::ExecuteUbergraph_WBP_PalInteractiveObjectIndicatorCanvas(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "ExecuteUbergraph_WBP_PalInteractiveObjectIndicatorCanvas");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_ExecuteUbergraph_WBP_PalInteractiveObjectIndicatorCanvas Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.GetIndicatorText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TScriptInterface<class IPalInteractiveObjectComponentInterface>InteractiveObject                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPalInteractiveObjectIndicatorType      IndicatorType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPalInteractiveObjectButtonType         buttonType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanToggle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             NewParam                                               (Parm, OutParm)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::GetIndicatorText(TScriptInterface<class IPalInteractiveObjectComponentInterface> InteractiveObject, EPalInteractiveObjectIndicatorType IndicatorType, EPalInteractiveObjectButtonType buttonType, bool CanToggle, class FText* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "GetIndicatorText");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_GetIndicatorText Parms{};

	Parms.InteractiveObject = InteractiveObject;
	Parms.IndicatorType = IndicatorType;
	Parms.buttonType = buttonType;
	Parms.CanToggle = CanToggle;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.HideIndicators
// (Private, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::HideIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "HideIndicators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.HideInteractHUDInterfaceWidget
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::HideInteractHUDInterfaceWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "HideInteractHUDInterfaceWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.OnApplicationActivationStateChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsFocused                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::OnApplicationActivationStateChanged(bool bIsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "OnApplicationActivationStateChanged");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_OnApplicationActivationStateChanged Parms{};

	Parms.bIsFocused = bIsFocused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.OnChangeOtomo
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::OnChangeOtomo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "OnChangeOtomo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.OnKeyConfigChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPalKeyConfigSettings            PreSetting                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FPalKeyConfigSettings            NewSetting                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::OnKeyConfigChanged(const struct FPalKeyConfigSettings& PreSetting, const struct FPalKeyConfigSettings& NewSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "OnKeyConfigChanged");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_OnKeyConfigChanged Parms{};

	Parms.PreSetting = std::move(PreSetting);
	Parms.NewSetting = std::move(NewSetting);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.OnRide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           RideActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::OnRide(class AActor* RideActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "OnRide");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_OnRide Parms{};

	Parms.RideActor = RideActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.OnUpdateTargetInteractiveObject
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IPalInteractiveObjectComponentInterface>InteractiveObject                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::OnUpdateTargetInteractiveObject(TScriptInterface<class IPalInteractiveObjectComponentInterface> InteractiveObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "OnUpdateTargetInteractiveObject");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_OnUpdateTargetInteractiveObject Parms{};

	Parms.InteractiveObject = InteractiveObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.SetupAfterCreatePlayer
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::SetupAfterCreatePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "SetupAfterCreatePlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.SetupEvent
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::SetupEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "SetupEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.SetZOrder
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_ZOrder                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::SetZOrder(int32 Param_ZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "SetZOrder");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_SetZOrder Parms{};

	Parms.Param_ZOrder = Param_ZOrder;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.ShowIndicator
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPalInteractiveObjectActionType         ActionType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPalInteractiveObjectActionInfoDataActionInfoData                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::ShowIndicator(EPalInteractiveObjectActionType ActionType, const struct FPalInteractiveObjectActionInfoData& ActionInfoData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "ShowIndicator");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_ShowIndicator Parms{};

	Parms.ActionType = ActionType;
	Parms.ActionInfoData = std::move(ActionInfoData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.ShowIndicators
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::ShowIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "ShowIndicators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.ShowInteractHUDInterfaceWidget
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::ShowInteractHUDInterfaceWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "ShowInteractHUDInterfaceWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.ShowOtomoIndicator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPalInteractiveObjectActionType         ActionType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPalInteractiveObjectActionInfoDataActionInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::ShowOtomoIndicator(EPalInteractiveObjectActionType ActionType, const struct FPalInteractiveObjectActionInfoData& ActionInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "ShowOtomoIndicator");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_ShowOtomoIndicator Parms{};

	Parms.ActionType = ActionType;
	Parms.ActionInfo = std::move(ActionInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.ShowOtomoIndicators
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::ShowOtomoIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "ShowOtomoIndicators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "Tick");

	Params::WBP_PalInteractiveObjectIndicatorCanvas_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.Update Indicator UIs
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::Update_Indicator_UIs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "Update Indicator UIs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.UpdateIndicatorBoxPosition
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::UpdateIndicatorBoxPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "UpdateIndicatorBoxPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.UpdateOtomoIndicatorPosition
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::UpdateOtomoIndicatorPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "UpdateOtomoIndicatorPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PalInteractiveObjectIndicatorCanvas.WBP_PalInteractiveObjectIndicatorCanvas_C.UpdateOtomoIndicators
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PalInteractiveObjectIndicatorCanvas_C::UpdateOtomoIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PalInteractiveObjectIndicatorCanvas_C", "UpdateOtomoIndicators");

	UObject::ProcessEvent(Func, nullptr);
}

}

