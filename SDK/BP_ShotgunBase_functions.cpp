#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShotgunBase

#include "Basic.hpp"

#include "BP_ShotgunBase_classes.hpp"
#include "BP_ShotgunBase_parameters.hpp"


namespace SDK
{

// Function BP_ShotgunBase.BP_ShotgunBase_C.CalcAccuracy
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_ShotgunBase_C::CalcAccuracy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "CalcAccuracy");

	Params::BP_ShotgunBase_C_CalcAccuracy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.CalcDPS
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_ShotgunBase_C::CalcDPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "CalcDPS");

	Params::BP_ShotgunBase_C_CalcDPS Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.CalcRange
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_ShotgunBase_C::CalcRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "CalcRange");

	Params::BP_ShotgunBase_C_CalcRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.CanShoot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Can                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::CanShoot(bool* Can)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "CanShoot");

	Params::BP_ShotgunBase_C_CanShoot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Can != nullptr)
		*Can = Parms.Can;
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.CountShotInterval
// (BlueprintCallable, BlueprintEvent)

void ABP_ShotgunBase_C::CountShotInterval()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "CountShotInterval");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.ExecuteUbergraph_BP_ShotgunBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::ExecuteUbergraph_BP_ShotgunBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "ExecuteUbergraph_BP_ShotgunBase");

	Params::BP_ShotgunBase_C_ExecuteUbergraph_BP_ShotgunBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.GetBulletClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           NewParam                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::GetBulletClass(class UClass** NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "GetBulletClass");

	Params::BP_ShotgunBase_C_GetBulletClass Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.GetEjectionPort
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       EjectionTransform                                      (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::GetEjectionPort(struct FTransform* EjectionTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "GetEjectionPort");

	Params::BP_ShotgunBase_C_GetEjectionPort Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EjectionTransform != nullptr)
		*EjectionTransform = std::move(Parms.EjectionTransform);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.GetEquipSocketName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FName ABP_ShotgunBase_C::GetEquipSocketName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "GetEquipSocketName");

	Params::BP_ShotgunBase_C_GetEquipSocketName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.GetMuzzleTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::GetMuzzleTransform(struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "GetMuzzleTransform");

	Params::BP_ShotgunBase_C_GetMuzzleTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.GetShootTransformList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  BaseAngle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlurAngle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FTransform>               ShootTransformList                                     (Parm, OutParm)

void ABP_ShotgunBase_C::GetShootTransformList(double BaseAngle, double BlurAngle, TArray<struct FTransform>* ShootTransformList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "GetShootTransformList");

	Params::BP_ShotgunBase_C_GetShootTransformList Parms{};

	Parms.BaseAngle = BaseAngle;
	Parms.BlurAngle = BlurAngle;

	UObject::ProcessEvent(Func, &Parms);

	if (ShootTransformList != nullptr)
		*ShootTransformList = std::move(Parms.ShootTransformList);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.GetTargetPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          TargetLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::GetTargetPosition(struct FVector* TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "GetTargetPosition");

	Params::BP_ShotgunBase_C_GetTargetPosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetLocation != nullptr)
		*TargetLocation = std::move(Parms.TargetLocation);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.OnAttachWeapon
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AttachActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::OnAttachWeapon(class AActor* AttachActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "OnAttachWeapon");

	Params::BP_ShotgunBase_C_OnAttachWeapon Parms{};

	Parms.AttachActor = AttachActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.OnDetachWeapon
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DetachActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::OnDetachWeapon(class AActor* DetachActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "OnDetachWeapon");

	Params::BP_ShotgunBase_C_OnDetachWeapon Parms{};

	Parms.DetachActor = DetachActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.OnPullTrigger
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_ShotgunBase_C::OnPullTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "OnPullTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.OnReleaseTrigger
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_ShotgunBase_C::OnReleaseTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "OnReleaseTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.OnShot
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ShotgunBase_C::OnShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "OnShot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.OnshotInternal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsShoted                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::OnshotInternal(bool* IsShoted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "OnshotInternal");

	Params::BP_ShotgunBase_C_OnshotInternal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsShoted != nullptr)
		*IsShoted = Parms.IsShoted;
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.PlayFireSound
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ShotgunBase_C::PlayFireSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "PlayFireSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "ReceiveTick");

	Params::BP_ShotgunBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.ShootIntervalEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_ShotgunBase_C::ShootIntervalEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "ShootIntervalEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.StopReloadWhenRoll
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPalActionBase*                   Action                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ShotgunBase_C::StopReloadWhenRoll(const class UPalActionBase* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "StopReloadWhenRoll");

	Params::BP_ShotgunBase_C_StopReloadWhenRoll Parms{};

	Parms.Action = Action;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.GetDefaultBlurAngle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_ShotgunBase_C::GetDefaultBlurAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "GetDefaultBlurAngle");

	Params::BP_ShotgunBase_C_GetDefaultBlurAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.GetLeftHandTransform
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform ABP_ShotgunBase_C::GetLeftHandTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "GetLeftHandTransform");

	Params::BP_ShotgunBase_C_GetLeftHandTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ShotgunBase.BP_ShotgunBase_C.IsUseLeftHandAttach
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_ShotgunBase_C::IsUseLeftHandAttach() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShotgunBase_C", "IsUseLeftHandAttach");

	Params::BP_ShotgunBase_C_IsUseLeftHandAttach Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

