#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShotgunBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Pal_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ShotgunBase.BP_ShotgunBase_C
// 0x0030 (0x0568 - 0x0538)
class ABP_ShotgunBase_C : public APalWeaponBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0538(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Weapon;                                            // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        ShotInterval;                                      // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScatteredAngle;                                    // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanShootFlag;                                      // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DirectionForReticle;                               // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIntervalTimeEnded;                               // 0x0562(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	float CalcAccuracy();
	float CalcDPS();
	float CalcRange();
	void CanShoot(bool* Can);
	void CountShotInterval();
	void ExecuteUbergraph_BP_ShotgunBase(int32 EntryPoint);
	void GetBulletClass(class UClass** NewParam);
	void GetEjectionPort(struct FTransform* EjectionTransform);
	class FName GetEquipSocketName();
	void GetMuzzleTransform(struct FTransform* Transform);
	void GetShootTransformList(double BaseAngle, double BlurAngle, TArray<struct FTransform>* ShootTransformList);
	void GetTargetPosition(struct FVector* TargetLocation);
	void OnAttachWeapon(class AActor* AttachActor);
	void OnDetachWeapon(class AActor* DetachActor);
	void OnPullTrigger();
	void OnReleaseTrigger();
	void OnShot();
	void OnshotInternal(bool* IsShoted);
	void PlayFireSound();
	void ReceiveTick(float DeltaSeconds);
	void ShootIntervalEvent();
	void StopReloadWhenRoll(const class UPalActionBase* Action);

	float GetDefaultBlurAngle() const;
	struct FTransform GetLeftHandTransform() const;
	bool IsUseLeftHandAttach() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ShotgunBase_C">();
	}
	static class ABP_ShotgunBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ShotgunBase_C>();
	}
};
static_assert(alignof(ABP_ShotgunBase_C) == 0x000008, "Wrong alignment on ABP_ShotgunBase_C");
static_assert(sizeof(ABP_ShotgunBase_C) == 0x000568, "Wrong size on ABP_ShotgunBase_C");
static_assert(offsetof(ABP_ShotgunBase_C, UberGraphFrame) == 0x000538, "Member 'ABP_ShotgunBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ShotgunBase_C, Weapon) == 0x000540, "Member 'ABP_ShotgunBase_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_ShotgunBase_C, DefaultSceneRoot) == 0x000548, "Member 'ABP_ShotgunBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ShotgunBase_C, ShotInterval) == 0x000550, "Member 'ABP_ShotgunBase_C::ShotInterval' has a wrong offset!");
static_assert(offsetof(ABP_ShotgunBase_C, ScatteredAngle) == 0x000558, "Member 'ABP_ShotgunBase_C::ScatteredAngle' has a wrong offset!");
static_assert(offsetof(ABP_ShotgunBase_C, CanShootFlag) == 0x000560, "Member 'ABP_ShotgunBase_C::CanShootFlag' has a wrong offset!");
static_assert(offsetof(ABP_ShotgunBase_C, DirectionForReticle) == 0x000561, "Member 'ABP_ShotgunBase_C::DirectionForReticle' has a wrong offset!");
static_assert(offsetof(ABP_ShotgunBase_C, IsIntervalTimeEnded) == 0x000562, "Member 'ABP_ShotgunBase_C::IsIntervalTimeEnded' has a wrong offset!");

}

