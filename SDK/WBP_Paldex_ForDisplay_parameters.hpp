#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Paldex_ForDisplay

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Pal_structs.hpp"
#include "E_PaldexDistributionTimeType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.BndEvt__WBP_Paldex_ForDisplay_WBP_Paldex_K2Node_ComponentBoundEvent_3_OnClickedAnyPalPanel__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Paldex_ForDisplay_C_BndEvt__WBP_Paldex_ForDisplay_WBP_Paldex_K2Node_ComponentBoundEvent_3_OnClickedAnyPalPanel__DelegateSignature final
{
public:
	class FName                                   CharacterID;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_BndEvt__WBP_Paldex_ForDisplay_WBP_Paldex_K2Node_ComponentBoundEvent_3_OnClickedAnyPalPanel__DelegateSignature) == 0x000004, "Wrong alignment on WBP_Paldex_ForDisplay_C_BndEvt__WBP_Paldex_ForDisplay_WBP_Paldex_K2Node_ComponentBoundEvent_3_OnClickedAnyPalPanel__DelegateSignature");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_BndEvt__WBP_Paldex_ForDisplay_WBP_Paldex_K2Node_ComponentBoundEvent_3_OnClickedAnyPalPanel__DelegateSignature) == 0x000008, "Wrong size on WBP_Paldex_ForDisplay_C_BndEvt__WBP_Paldex_ForDisplay_WBP_Paldex_K2Node_ComponentBoundEvent_3_OnClickedAnyPalPanel__DelegateSignature");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_BndEvt__WBP_Paldex_ForDisplay_WBP_Paldex_K2Node_ComponentBoundEvent_3_OnClickedAnyPalPanel__DelegateSignature, CharacterID) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_BndEvt__WBP_Paldex_ForDisplay_WBP_Paldex_K2Node_ComponentBoundEvent_3_OnClickedAnyPalPanel__DelegateSignature::CharacterID' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.Change Map Zoom Rate
// 0x0001 (0x0001 - 0x0000)
struct WBP_Paldex_ForDisplay_C_Change_Map_Zoom_Rate final
{
public:
	bool                                          CallFunc_IsZoomMax_isMax;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_Change_Map_Zoom_Rate) == 0x000001, "Wrong alignment on WBP_Paldex_ForDisplay_C_Change_Map_Zoom_Rate");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_Change_Map_Zoom_Rate) == 0x000001, "Wrong size on WBP_Paldex_ForDisplay_C_Change_Map_Zoom_Rate");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Change_Map_Zoom_Rate, CallFunc_IsZoomMax_isMax) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_Change_Map_Zoom_Rate::CallFunc_IsZoomMax_isMax' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.ChangeDistributionTime
// 0x0001 (0x0001 - 0x0000)
struct WBP_Paldex_ForDisplay_C_ChangeDistributionTime final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_ChangeDistributionTime) == 0x000001, "Wrong alignment on WBP_Paldex_ForDisplay_C_ChangeDistributionTime");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_ChangeDistributionTime) == 0x000001, "Wrong size on WBP_Paldex_ForDisplay_C_ChangeDistributionTime");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ChangeDistributionTime, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_ChangeDistributionTime::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.DelayScrollToCharacterID
// 0x0008 (0x0008 - 0x0000)
struct WBP_Paldex_ForDisplay_C_DelayScrollToCharacterID final
{
public:
	class FName                                   CharacterID;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_DelayScrollToCharacterID) == 0x000004, "Wrong alignment on WBP_Paldex_ForDisplay_C_DelayScrollToCharacterID");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_DelayScrollToCharacterID) == 0x000008, "Wrong size on WBP_Paldex_ForDisplay_C_DelayScrollToCharacterID");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_DelayScrollToCharacterID, CharacterID) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_DelayScrollToCharacterID::CharacterID' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.ExecuteUbergraph_WBP_Paldex_ForDisplay
// 0x0060 (0x0060 - 0x0000)
struct WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_ComponentBoundEvent_CharacterID;            // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_590A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalUIPaldex_DisplayInfo               CallFunc_Map_Find_Value;                           // 0x0010(0x0038)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_590B[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_CharacterID;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay) == 0x000008, "Wrong alignment on WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay) == 0x000060, "Wrong size on WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay, EntryPoint) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay, K2Node_ComponentBoundEvent_CharacterID) == 0x000004, "Member 'WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay::K2Node_ComponentBoundEvent_CharacterID' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay, CallFunc_Map_Find_Value) == 0x000010, "Member 'WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000049, "Member 'WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay, CallFunc_GetHUDService_ReturnValue) == 0x000050, "Member 'WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay::CallFunc_GetHUDService_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay, K2Node_CustomEvent_CharacterID) == 0x000058, "Member 'WBP_Paldex_ForDisplay_C_ExecuteUbergraph_WBP_Paldex_ForDisplay::K2Node_CustomEvent_CharacterID' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.OnAnalogValueChanged
// 0x02C8 (0x02C8 - 0x0000)
struct WBP_Paldex_ForDisplay_C_OnAnalogValueChanged final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FAnalogInputEvent                      InAnalogInputEvent;                                // 0x0040(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0088(0x00B8)(Parm, OutParm, ReturnParm)
	float                                         CallFunc_GetAnalogValue_ReturnValue;               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_590C[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyEvent                              CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue; // 0x0148(0x0040)()
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0188(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_590D[0x6];                                     // 0x01A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x01F8(0x00B8)()
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged) == 0x000008, "Wrong alignment on WBP_Paldex_ForDisplay_C_OnAnalogValueChanged");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged) == 0x0002C8, "Wrong size on WBP_Paldex_ForDisplay_C_OnAnalogValueChanged");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, MyGeometry) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, InAnalogInputEvent) == 0x000040, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::InAnalogInputEvent' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, ReturnValue) == 0x000088, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_GetAnalogValue_ReturnValue) == 0x000140, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_GetAnalogValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue) == 0x000148, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_GetKey_ReturnValue) == 0x000188, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x0001A0, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x0001A1, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0001A8, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0001B0, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_MakeRotator_ReturnValue) == 0x0001B8, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0001D0, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_MakeVector2D_ReturnValue) == 0x0001D8, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_MakeVector2D_ReturnValue_1) == 0x0001E8, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_Unhandled_ReturnValue) == 0x0001F8, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0002B0, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x0002B8, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnAnalogValueChanged, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0002C0, "Member 'WBP_Paldex_ForDisplay_C_OnAnalogValueChanged::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.OnMouseMove
// 0x0280 (0x0280 - 0x0000)
struct WBP_Paldex_ForDisplay_C_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CallFunc_PointerEvent_GetCursorDelta_ReturnValue;  // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_590E[0x7];                                     // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x01A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x01C8(0x00B8)()
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_OnMouseMove) == 0x000008, "Wrong alignment on WBP_Paldex_ForDisplay_C_OnMouseMove");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_OnMouseMove) == 0x000280, "Wrong size on WBP_Paldex_ForDisplay_C_OnMouseMove");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseMove, MouseEvent) == 0x000040, "Member 'WBP_Paldex_ForDisplay_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseMove, ReturnValue) == 0x0000D8, "Member 'WBP_Paldex_ForDisplay_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseMove, CallFunc_PointerEvent_GetCursorDelta_ReturnValue) == 0x000190, "Member 'WBP_Paldex_ForDisplay_C_OnMouseMove::CallFunc_PointerEvent_GetCursorDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseMove, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x0001A0, "Member 'WBP_Paldex_ForDisplay_C_OnMouseMove::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseMove, CallFunc_MakeVector2D_ReturnValue) == 0x0001A8, "Member 'WBP_Paldex_ForDisplay_C_OnMouseMove::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseMove, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x0001B8, "Member 'WBP_Paldex_ForDisplay_C_OnMouseMove::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseMove, CallFunc_Unhandled_ReturnValue) == 0x0001C8, "Member 'WBP_Paldex_ForDisplay_C_OnMouseMove::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.OnMouseWheel
// 0x0290 (0x0290 - 0x0000)
struct WBP_Paldex_ForDisplay_C_OnMouseWheel final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0040(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm)
	float                                         CallFunc_PointerEvent_GetWheelDelta_ReturnValue;   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_590F[0x4];                                     // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x01C0(0x00B8)()
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_OnMouseWheel) == 0x000008, "Wrong alignment on WBP_Paldex_ForDisplay_C_OnMouseWheel");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_OnMouseWheel) == 0x000290, "Wrong size on WBP_Paldex_ForDisplay_C_OnMouseWheel");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, MyGeometry) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, MouseEvent) == 0x000040, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, ReturnValue) == 0x0000D8, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, CallFunc_PointerEvent_GetWheelDelta_ReturnValue) == 0x000190, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::CallFunc_PointerEvent_GetWheelDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000198, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0001A0, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, CallFunc_MakeRotator_ReturnValue) == 0x0001A8, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, CallFunc_Unhandled_ReturnValue) == 0x0001C0, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000278, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x000280, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_OnMouseWheel, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000288, "Member 'WBP_Paldex_ForDisplay_C_OnMouseWheel::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.SetEnableRandomCryAction
// 0x0018 (0x0018 - 0x0000)
struct WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction final
{
public:
	bool                                          IsEnableFlag;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5910[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue;        // 0x0014(0x0004)(NoDestructor)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction) == 0x000004, "Wrong alignment on WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction) == 0x000018, "Wrong size on WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction, IsEnableFlag) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction::IsEnableFlag' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction, CallFunc_RegisterActionBinding_ReturnValue) == 0x000014, "Member 'WBP_Paldex_ForDisplay_C_SetEnableRandomCryAction::CallFunc_RegisterActionBinding_ReturnValue' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.Setup
// 0x0070 (0x0070 - 0x0000)
struct WBP_Paldex_ForDisplay_C_Setup final
{
public:
	int32                                         EncountedNum;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalPlayerRecordData*                   CallFunc_GetLocalRecordData_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5911[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5912[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalUIPaldex_DisplayInfo               CallFunc_Array_Get_Item;                           // 0x0030(0x0038)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_Setup) == 0x000008, "Wrong alignment on WBP_Paldex_ForDisplay_C_Setup");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_Setup) == 0x000070, "Wrong size on WBP_Paldex_ForDisplay_C_Setup");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, EncountedNum) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_Setup::EncountedNum' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, Temp_int_Array_Index_Variable) == 0x000004, "Member 'WBP_Paldex_ForDisplay_C_Setup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, CallFunc_GetHUDService_ReturnValue) == 0x000008, "Member 'WBP_Paldex_ForDisplay_C_Setup::CallFunc_GetHUDService_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, CallFunc_GetLocalRecordData_ReturnValue) == 0x000010, "Member 'WBP_Paldex_ForDisplay_C_Setup::CallFunc_GetLocalRecordData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'WBP_Paldex_ForDisplay_C_Setup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00001C, "Member 'WBP_Paldex_ForDisplay_C_Setup::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'WBP_Paldex_ForDisplay_C_Setup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, Temp_int_Variable) == 0x000024, "Member 'WBP_Paldex_ForDisplay_C_Setup::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'WBP_Paldex_ForDisplay_C_Setup::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, CallFunc_Array_Get_Item) == 0x000030, "Member 'WBP_Paldex_ForDisplay_C_Setup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'WBP_Paldex_ForDisplay_C_Setup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'WBP_Paldex_ForDisplay_C_Setup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_Setup, K2Node_SwitchEnum_CmpSuccess) == 0x00006D, "Member 'WBP_Paldex_ForDisplay_C_Setup::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.SwitchDistributionTime
// 0x0048 (0x0048 - 0x0000)
struct WBP_Paldex_ForDisplay_C_SwitchDistributionTime final
{
public:
	E_PaldexDistributionTimeType                  TimeType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5913[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalUIPaldex_DisplayInfo               CallFunc_Map_Find_Value;                           // 0x0008(0x0038)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_SwitchDistributionTime) == 0x000008, "Wrong alignment on WBP_Paldex_ForDisplay_C_SwitchDistributionTime");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_SwitchDistributionTime) == 0x000048, "Wrong size on WBP_Paldex_ForDisplay_C_SwitchDistributionTime");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_SwitchDistributionTime, TimeType) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_SwitchDistributionTime::TimeType' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_SwitchDistributionTime, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WBP_Paldex_ForDisplay_C_SwitchDistributionTime::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_SwitchDistributionTime, CallFunc_Map_Find_Value) == 0x000008, "Member 'WBP_Paldex_ForDisplay_C_SwitchDistributionTime::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_SwitchDistributionTime, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'WBP_Paldex_ForDisplay_C_SwitchDistributionTime::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.ToDistributionDisplayMode
// 0x0088 (0x0088 - 0x0000)
struct WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode final
{
public:
	TDelegate<void(E_PaldexDistributionTimeType Time)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue;        // 0x0020(0x0004)(NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue_1;      // 0x0034(0x0004)(NoDestructor)
	struct FPalUIPaldex_DisplayInfo               CallFunc_Map_Find_Value;                           // 0x0038(0x0038)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5914[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue_2;      // 0x0084(0x0004)(NoDestructor)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode) == 0x000008, "Wrong alignment on WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode) == 0x000088, "Wrong size on WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode, CallFunc_RegisterActionBinding_ReturnValue) == 0x000020, "Member 'WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode::CallFunc_RegisterActionBinding_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode, CallFunc_RegisterActionBinding_ReturnValue_1) == 0x000034, "Member 'WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode::CallFunc_RegisterActionBinding_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode, CallFunc_Map_Find_Value) == 0x000038, "Member 'WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode, CallFunc_Map_Find_ReturnValue) == 0x000070, "Member 'WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode, K2Node_CreateDelegate_OutputDelegate_3) == 0x000074, "Member 'WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode, CallFunc_RegisterActionBinding_ReturnValue_2) == 0x000084, "Member 'WBP_Paldex_ForDisplay_C_ToDistributionDisplayMode::CallFunc_RegisterActionBinding_ReturnValue_2' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.ToModelDisplayMode
// 0x0050 (0x0050 - 0x0000)
struct WBP_Paldex_ForDisplay_C_ToModelDisplayMode final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPalUIPaldex_DisplayInfo               CallFunc_Map_Find_Value;                           // 0x0010(0x0038)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5915[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPalUIActionBindData                   CallFunc_RegisterActionBinding_ReturnValue;        // 0x004C(0x0004)(NoDestructor)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_ToModelDisplayMode) == 0x000008, "Wrong alignment on WBP_Paldex_ForDisplay_C_ToModelDisplayMode");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_ToModelDisplayMode) == 0x000050, "Wrong size on WBP_Paldex_ForDisplay_C_ToModelDisplayMode");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToModelDisplayMode, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_ToModelDisplayMode::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToModelDisplayMode, CallFunc_Map_Find_Value) == 0x000010, "Member 'WBP_Paldex_ForDisplay_C_ToModelDisplayMode::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToModelDisplayMode, CallFunc_Map_Find_ReturnValue) == 0x000048, "Member 'WBP_Paldex_ForDisplay_C_ToModelDisplayMode::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToModelDisplayMode, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000049, "Member 'WBP_Paldex_ForDisplay_C_ToModelDisplayMode::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_ToModelDisplayMode, CallFunc_RegisterActionBinding_ReturnValue) == 0x00004C, "Member 'WBP_Paldex_ForDisplay_C_ToModelDisplayMode::CallFunc_RegisterActionBinding_ReturnValue' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.UpdateNewFlag
// 0x0088 (0x0088 - 0x0000)
struct WBP_Paldex_ForDisplay_C_UpdateNewFlag final
{
public:
	class FName                                   CharacterID;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPalTribeID                                   CallFunc_GetTribeIDFromCharacterID_ReturnValue;    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5916[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5917[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APalPlayerState*                        CallFunc_GetLocalPlayerState_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalPlayerLocalRecordData*              CallFunc_GetLocalRecordData_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  CallFunc_Map_Values_Values;                        // 0x0030(0x0010)(ReferenceParm)
	struct FPalUIPaldex_DisplayInfo               CallFunc_Map_Find_Value;                           // 0x0040(0x0038)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item;                           // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5918[0x2];                                     // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_Value_1;                         // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_UpdateNewFlag) == 0x000008, "Wrong alignment on WBP_Paldex_ForDisplay_C_UpdateNewFlag");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_UpdateNewFlag) == 0x000088, "Wrong size on WBP_Paldex_ForDisplay_C_UpdateNewFlag");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CharacterID) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CharacterID' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_GetTribeIDFromCharacterID_ReturnValue) == 0x000008, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_GetTribeIDFromCharacterID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, Temp_bool_Variable) == 0x000018, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_GetLocalPlayerState_ReturnValue) == 0x000020, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_GetLocalPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_GetLocalRecordData_ReturnValue) == 0x000028, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_GetLocalRecordData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_Map_Values_Values) == 0x000030, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_Map_Find_Value) == 0x000040, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_Map_Find_ReturnValue) == 0x000078, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_Array_Get_Item) == 0x000079, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, K2Node_SwitchEnum_CmpSuccess) == 0x000080, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_Less_IntInt_ReturnValue) == 0x000081, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_Map_Find_Value_1) == 0x000082, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_UpdateNewFlag, CallFunc_Map_Find_ReturnValue_1) == 0x000083, "Member 'WBP_Paldex_ForDisplay_C_UpdateNewFlag::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");

// Function WBP_Paldex_ForDisplay.WBP_Paldex_ForDisplay_C.BP_GetDesiredFocusTarget
// 0x0020 (0x0020 - 0x0000)
struct WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetFocusTargetByCharacterID_target;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetFocusTargetByIndex_target;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget) == 0x000020, "Wrong size on WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget, CallFunc_GetFocusTargetByCharacterID_target) == 0x000008, "Member 'WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget::CallFunc_GetFocusTargetByCharacterID_target' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget, CallFunc_GetFocusTargetByIndex_target) == 0x000010, "Member 'WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget::CallFunc_GetFocusTargetByIndex_target' has a wrong offset!");
static_assert(offsetof(WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'WBP_Paldex_ForDisplay_C_BP_GetDesiredFocusTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

